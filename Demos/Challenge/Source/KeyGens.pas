unit KeyGens;

interface

uses SysUtils, Classes, tfTypes, tfBytes, tfHashes, tfCiphers, chUtils;

const
// replace by random 16-byte hex value
  MasterHex = '0123456789ABCDEF0123456789ABCDEF';

type
  TKeyGen = record
  private
    KeyTable: array[0..99] of THashedKey;
    procedure GenerateKeys;
    function KeyToArray(const Key: THashedKey): string;
    procedure SaveKeys(const FileName: string);
  public
    class procedure Execute(const FileName: string); static;
  end;

implementation

class procedure TKeyGen.Execute(const FileName: string);
var
  KeyGen: TKeyGen;

begin
  KeyGen.GenerateKeys;
  KeyGen.SaveKeys(FileName);
end;

// generates 100 9-byte pseudorandom keys
procedure TKeyGen.GenerateKeys;
var
  Cipher: TCipher;
  DerivedKey: TDerivedKey;
  I: Integer;

begin
  Cipher:= TCipher.AES(CTR_ENCRYPT).ExpandKey(ByteArray.ParseHex(MasterHex));
  for I:= 0 to 99 do begin
    Cipher.GetKeyStream(DerivedKey, SizeOf(TDerivedKey));
// print valid serial numbers
    Writeln(TSerialKey.FromDerived(DerivedKey).ToString);
    KeyTable[I]:= TSerialKey.FromDerived(DerivedKey).ToHash;
  end;
end;

function TKeyGen.KeyToArray(const Key: THashedKey): string;
var
  I: Integer;

begin
  Result:= ' (';
  for I:= 0 to Length(Key) - 2 do begin
    Result:= Result + IntToStr(Key[I]) + ', ';
  end;
  Result:= Result + IntToStr(Key[Length(Key) - 1]) + ')';
end;

procedure TKeyGen.SaveKeys(const FileName: string);
var
//  DerivedKey: TDerivedKey;
  I: Integer;
  SL: TStringList;

begin
  SL:= TStringList.Create;
  try
    SL.Add('// !! Autogenerated, don''t edit !!');
    SL.Add('');
    SL.Add('unit KeyTable;');
    SL.Add('');
    SL.Add('interface');
    SL.Add('');
    SL.Add('uses ChUtils;');
    SL.Add('');
    SL.Add('const');
    SL.Add('  HashedKeys: array[0..99] of THashedKey = (');
    for I:= 0 to 98 do begin
      SL.Add(KeyToArray(KeyTable[I]) + ',');
    end;
    SL.Add(KeyToArray(KeyTable[99]) + ');');
    SL.Add('');
    SL.Add('implementation');
    SL.Add('');
    SL.Add('end.');
    SL.SaveToFile(FileName);
  finally
    SL.Free;
  end;
end;

end.
